import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ComposedChart, Bar, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { ClipboardCheck, BarChart3, Table2, Download } from 'lucide-react';

const StepIndicator = ({ currentStep, setCurrentStep }) => (
  <div className="flex justify-center mb-4">
    <div className="flex items-center flex-wrap justify-center gap-2 md:gap-3">
      <Button
        onClick={() => setCurrentStep(1)}
        className={`flex items-center justify-center w-12 h-12 md:w-16 md:h-16 rounded-full border-2 shadow-md transition-all duration-200
          ${currentStep === 1 ? 'border-blue-600 bg-blue-600 text-white' : 'border-gray-300 hover:border-blue-400'}`}
        aria-label="Paso 1: Planificación"
      >
        <ClipboardCheck size={24} />
      </Button>
      <div className={`w-8 md:w-12 h-1 ${currentStep >= 2 ? 'bg-blue-600' : 'bg-gray-300'}`} />
      <Button
        onClick={() => setCurrentStep(2)}
        disabled={!currentStep >= 2}
        className={`flex items-center justify-center w-12 h-12 md:w-16 md:h-16 rounded-full border-2 shadow-md transition-all duration-200
          ${currentStep === 2 ? 'border-blue-600 bg-blue-600 text-white' : currentStep > 2 ? 'border-blue-600' : 'border-gray-300 hover:border-blue-400'}`}
        aria-label="Paso 2: Análisis"
      >
        <BarChart3 size={24} />
      </Button>
      <div className={`w-8 md:w-12 h-1 ${currentStep >= 3 ? 'bg-blue-600' : 'bg-gray-300'}`} />
      <Button
        onClick={() => setCurrentStep(3)}
        disabled={!currentStep >= 2}
        className={`flex items-center justify-center w-12 h-12 md:w-16 md:h-16 rounded-full border-2 shadow-md transition-all duration-200
          ${currentStep === 3 ? 'border-blue-600 bg-blue-600 text-white' : 'border-gray-300 hover:border-blue-400'}`}
        aria-label="Paso 3: Datos"
      >
        <Table2 size={24} />
      </Button>
    </div>
  </div>
);

const DayTabs = ({ formData, handleChange }) => {
  const [activeDay, setActiveDay] = useState('Monday');
  const dayAbbreviations = {
    'Monday': 'Lun',
    'Tuesday': 'Mar',
    'Wednesday': 'Mie',
    'Thursday': 'Jue',
    'Friday': 'Vie',
    'Saturday': 'Sab'
  };

  return (
    <div>
      <div className="flex flex-wrap justify-center md:justify-start gap-1 mb-2">
        {Object.keys(formData).map(day => (
          <Button
            key={day}
            onClick={() => setActiveDay(day)}
            className={`px-2 py-1 text-xs rounded-md transition-colors ${activeDay === day 
              ? 'bg-blue-600 text-white shadow-sm' 
              : 'bg-gray-100 hover:bg-gray-200 text-gray-700'}`}
            size="sm"
          >
            <span>{dayAbbreviations[day]}</span>
          </Button>
        ))}
      </div>
      <DaySection day={activeDay} data={formData[activeDay]} onChange={handleChange} />
    </div>
  );
};

const DaySection = ({ day, data, onChange }) => {
  const isWeekend = day === 'Saturday';
  
  return (
    <Card className="mb-3 border-l-4 border-l-blue-500 shadow-sm">
      <CardHeader className="py-2 px-3">
        <div className="flex justify-between items-center">
          <div>
            <CardTitle className="text-sm text-blue-600">{day}</CardTitle>
            <CardDescription className="text-xs text-gray-500">
              {isWeekend ? 'Fin de semana' : 'Día laboral'}
            </CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="py-2 px-3">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          <LocationSection 
            title="Rosario" 
            location="R" 
            data={data.R} 
            onChange={(field, value) => onChange(day, 'R', field, value)} 
            isWeekend={isWeekend} 
          />
          <LocationSection 
            title="Lo Miranda" 
            location="LM" 
            data={data.LM} 
            onChange={(field, value) => onChange(day, 'LM', field, value)} 
            isWeekend={isWeekend} 
          />
        </div>
      </CardContent>
    </Card>
  );
};

const LocationSection = ({ title, location, data, onChange, isWeekend }) => (
  <div className="p-2 bg-gray-50 rounded-lg border border-gray-100">
    <h3 className="font-medium text-gray-800 text-xs mb-2 pb-1 border-b">{title}</h3>
    <div className="grid grid-cols-2 gap-2">
      <div className="flex items-center">
        <label className="block text-xs font-medium text-gray-600 w-16">Turno A:</label>
        <input
          type="number"
          value={data.A}
          onChange={(e) => onChange('A', parseInt(e.target.value) || 0)}
          className="w-full p-1 text-xs border rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>
      {!isWeekend && (
        <div className="flex items-center">
          <label className="block text-xs font-medium text-gray-600 w-16">Turno B:</label>
          <input
            type="number"
            value={data.B}
            onChange={(e) => onChange('B', parseInt(e.target.value) || 0)}
            className="w-full p-1 text-xs border rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
      )}
      <div className="flex items-center">
        <label className="block text-xs font-medium text-gray-600 w-16">Total:</label>
        <input
          type="number"
          value={data.total}
          onChange={(e) => onChange('total', parseInt(e.target.value) || 0)}
          className="w-full p-1 text-xs border rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>
      <div className="flex items-center">
        <label className="block text-xs font-medium text-gray-600 w-16">Cuadrillas:</label>
        <input
          type="number"
          value={data.cantidad_cuadrillas}
          onChange={(e) => onChange('cantidad_cuadrillas', parseInt(e.target.value) || 0)}
          className="w-full p-1 text-xs border rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>
    </div>
  </div>
);

const AnalysisTabs = ({ data }) => {
  const [activeTab, setActiveTab] = useState('LM');
  
  const charts = {
    'LM': [
      {
        title: 'Cantidad total por sector por fecha planta LM',
        data: data.filter(item => item.Desitno === 'LM')
      },
      {
        title: 'Cantidad total en sector planta LM',
        data: data.filter(item => item.Desitno === 'LM')
      }
    ],
    'R': [
      {
        title: 'Cantidad total por sector por fecha planta R',
        data: data.filter(item => item.Desitno === 'R')
      },
      {
        title: 'Cantidad total en sector planta R',
        data: data.filter(item => item.Desitno === 'R')
      }
    ]
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-wrap justify-center md:justify-start gap-2 mb-4">
        <Button
          onClick={() => setActiveTab('LM')}
          className={`px-4 py-2 rounded-lg transition-colors ${activeTab === 'LM' 
            ? 'bg-blue-600 text-white shadow-md' 
            : 'bg-gray-100 hover:bg-gray-200 text-gray-700'}`}
        >
          Lo Miranda
        </Button>
        <Button
          onClick={() => setActiveTab('R')}
          className={`px-4 py-2 rounded-lg transition-colors ${activeTab === 'R' 
            ? 'bg-blue-600 text-white shadow-md' 
            : 'bg-gray-100 hover:bg-gray-200 text-gray-700'}`}
        >
          Rosario
        </Button>
      </div>
      
      {charts[activeTab].map((chart, index) => (
        <Card key={index} className="mb-6 shadow-md">
          <CardHeader className="border-b bg-gray-50">
            <CardTitle className="text-lg text-blue-600">{chart.title}</CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <div className="h-64 md:h-80 lg:h-96">
              <ResponsiveContainer width="100%" height="100%">
                <ComposedChart data={chart.data} margin={{ top: 5, right: 20, bottom: 60, left: 20 }}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis 
                    dataKey="Sector" 
                    angle={-45} 
                    textAnchor="end" 
                    height={60} 
                    tick={{ fill: '#6b7280', fontSize: 12 }}
                  />
                  <YAxis tick={{ fill: '#6b7280', fontSize: 12 }} />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'white', 
                      border: '1px solid #e5e7eb',
                      borderRadius: '8px',
                      boxShadow: '0 2px 5px rgba(0,0,0,0.1)'
                    }} 
                  />
                  <Legend wrapperStyle={{ paddingTop: 10 }} />
                  <Bar dataKey="Cantidad" fill="#2563eb" radius={[4, 4, 0, 0]} name="Cantidad" />
                  <Line 
                    type="monotone" 
                    dataKey="Promedio" 
                    stroke="#059669" 
                    strokeWidth={2}
                    dot={{ fill: '#059669', r: 5 }}
                    activeDot={{ r: 8 }}
                    name="Promedio" 
                  />
                </ComposedChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

const SimpleTable = ({ data }) => {
  const exportToCSV = () => {
    const csvRows = [];
    const headers = ['Fecha', 'Destino', 'Turno', 'Sector', 'Pabellon', 'Cantidad'];
    csvRows.push(headers.join(','));

    data.forEach(row => {
      const values = [
        new Date(row.FechaFaenacion).toLocaleDateString(),
        row.Desitno,
        row.LetraTurno,
        row.Sector,
        row.Pabellon,
        row.Cantidad
      ];
      csvRows.push(values.join(','));
    });

    const csvContent = `data:text/csv;charset=utf-8,${csvRows.join('\n')}`;
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', 'faena_data.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="overflow-x-auto">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
        <CardTitle className="text-xl font-bold text-gray-900">Detalle de Datos</CardTitle>
        <Button onClick={exportToCSV} className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2">
          <Download size={16} />
          Exportar a CSV
        </Button>
      </div>
      <div className="overflow-auto rounded-lg shadow">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Destino</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Turno</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sector</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pabellon</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cantidad</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {data.map((row, index) => (
              <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                  {new Date(row.FechaFaenacion).toLocaleDateString()}
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{row.Desitno}</td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{row.LetraTurno}</td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{row.Sector}</td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">{row.Pabellon}</td>
                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium">{row.Cantidad}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="mt-4 text-sm text-gray-500">
        Total de registros: {data.length}
      </div>
    </div>
  );
};

const FaenaPlannerDashboard = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [responseData, setResponseData] = useState(null);
  
  const initialDayData = {
    R: { A: 2625, B: 3150, total: 9500, cantidad_cuadrillas: 3 },
    LM: { A: 1680, B: 1680, total: 5700, cantidad_cuadrillas: 2 }
  };
  
  const initialWeekendData = {
    R: { A: 2500, B: 0, total: 2500, cantidad_cuadrillas: 3 },
    LM: { A: 2500, B: 0, total: 2500, cantidad_cuadrillas: 2 }
  };

  const [formData, setFormData] = useState({
    Monday: {...initialDayData},
    Tuesday: {...initialDayData},
    Wednesday: {...initialDayData},
    Thursday: {...initialDayData},
    Friday: {...initialDayData},
    Saturday: {...initialWeekendData}
  });

  const handleChange = (day, location, field, value) => {
    setFormData(prev => ({
      ...prev,
      [day]: {
        ...prev[day],
        [location]: {
          ...prev[day][location],
          [field]: value
        }
      }
    }));
  };

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch('https://programacion-faena-cerdos-erickshuffer.replit.app/plan_faena', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        throw new Error('Failed to submit data');
      }

      const data = await response.json();
      setResponseData(data);
      setCurrentStep(2);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="max-w-4xl mx-auto">
            <Card className="shadow-md border-l-4 border-l-blue-500">
              <CardHeader className="py-2 px-4 border-b">
                <div className="flex flex-wrap justify-between items-center">
                  <div>
                    <CardTitle className="text-base font-bold text-gray-900">Planificación de Faena</CardTitle>
                    <CardDescription className="text-xs">
                      Configure los valores para cada día y planta
                    </CardDescription>
                  </div>
                  <Button
                    onClick={handleSubmit}
                    disabled={loading}
                    className="mt-2 sm:mt-0 bg-blue-600 hover:bg-blue-700 text-white text-sm py-1 px-4 h-8 rounded-md shadow-sm transition-colors"
                  >
                    {loading ? 'Procesando...' : 'Enviar Plan'}
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="p-3">
                <DayTabs formData={formData} handleChange={handleChange} />
                
                {error && (
                  <div className="mt-2 p-2 bg-red-50 border-l-4 border-red-500 text-red-700 rounded text-xs">
                    <p className="font-medium">Error al enviar datos</p>
                    <p>{error}</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        );
      case 2:
        return (
          <div className="space-y-6 max-w-6xl mx-auto">
            {responseData && <AnalysisTabs data={responseData} />}
          </div>
        );
      case 3:
        return (
          <div className="space-y-6 max-w-6xl mx-auto">
            <Card className="shadow-lg">
              <CardHeader className="py-4 border-b bg-gray-50">
                <CardTitle className="text-xl font-bold text-gray-900">Datos Detallados</CardTitle>
                <CardDescription>
                  Visualización completa de los datos de faena
                </CardDescription>
              </CardHeader>
              <CardContent className="p-6">
                {responseData && <SimpleTable data={responseData} />}
              </CardContent>
            </Card>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-2 md:p-4">
      <div className="mb-3 text-center">
        <h1 className="text-lg md:text-xl font-bold text-gray-900 mb-1">Sistema de Planificación de Faena</h1>
        <p className="text-xs text-gray-600">Gestione y visualice datos para plantas Rosario y Lo Miranda</p>
      </div>
      <StepIndicator currentStep={currentStep} setCurrentStep={setCurrentStep} />
      {renderStepContent()}
    </div>
  );
};

export default FaenaPlannerDashboard;